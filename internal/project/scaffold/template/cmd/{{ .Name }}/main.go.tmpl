package main

import (
	"fmt"
	"os"
	"os/signal"

	"github.com/urfave/cli/v2"

	"code.pitz.tech/mya/jsonschema/internal/admin"
	"code.pitz.tech/mya/jsonschema/internal/version"
	"go.pitz.tech/lib/build"
	"go.pitz.tech/lib/flagset"
	"go.pitz.tech/lib/logger"
)

type GlobalConfig struct {
	Log logger.Config `json:"log"`
}

func main() {
	info := build.ParseInfo()

	cfg := &GlobalConfig{
		Log: logger.DefaultConfig(),
	}

	app := &cli.App{
		Name:		{{ .Name | quote }},
		Usage:		{{ .Description | quote }},
		UsageText:	"{{ .Name }} [options] <command>",
		Version:	info.Version,
		Flags:		flagset.Extract(cfg),
		Commands: []*cli.Command{
			admin.Command,
			version.Command,
		},
		Before: func(ctx *cli.Context) error {
			ctx.Context = logger.Setup(ctx.Context, cfg.Log)
			ctx.Context, _ = signal.NotifyContext(ctx.Context, os.Interrupt, os.Kill)

			return nil
		},
		Compiled:             info.Compiled,
		Copyright:            fmt.Sprintf("Copyright %d The {{ .Name }} Authors - All Rights Reserved\n", info.Compiled.Year()),
		HideVersion:          true,
		HideHelpCommand:      true,
		EnableBashCompletion: true,
		BashComplete:         cli.DefaultAppComplete,
		Metadata:             info.Metadata(),
	}

	if err := app.Run(os.Args); err != nil {
		fmt.Println(err)
	}
}
