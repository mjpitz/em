package main

import (
	"fmt"
	"os"
	"runtime"
	"strings"
	"time"

	"github.com/urfave/cli/v2"

	"code.pitz.tech/mya/{{ .Name }}/internal/admin"
	v "code.pitz.tech/mya/{{ .Name }}/internal/version"
	"go.pitz.tech/lib/flagset"
	"go.pitz.tech/lib/lifecycle"
	"go.pitz.tech/lib/logger"
)

var version = ""
var commit = ""
var date = time.Now().Format(time.RFC3339)

type GlobalConfig struct {
	Log logger.Config `json:"log"`
}

func main() {
	compiled, _ := time.Parse(time.RFC3339, date)

	cfg := &GlobalConfig{
		Log: logger.DefaultConfig(),
	}

	app := &cli.App{
		Name:			"{{ .Name }}",
		Usage:		 "",
		UsageText: "{{ .Name }} [options] <command>",
		Version: fmt.Sprintf("%s (%s)", version, commit),
		Flags: flagset.Extract(cfg),
		Commands: []*cli.Command{
			admin.Command,
			v.Command,
		},
		Before: func(ctx *cli.Context) error {
			ctx.Context = logger.Setup(ctx.Context, cfg.Log)
			ctx.Context = lifecycle.Setup(ctx.Context)

			return nil
		},
		After: func(ctx *cli.Context) error {
			lifecycle.Resolve(ctx.Context)
			lifecycle.Shutdown(ctx.Context)

			return nil
		},
		Compiled: compiled,
		Copyright: fmt.Sprintf("Copyright %d The {{ .Name }} Authors - All Rights Reserved\n", compiled.Year()),
		HideVersion: true,
		HideHelpCommand: true,
		EnableBashCompletion: true,
		BashComplete: cli.DefaultAppComplete,
		Metadata: map[string]interface{}{
			"arch": runtime.GOARCH,
			"compiled": date,
			"go_version": strings.TrimPrefix(runtime.Version(), "go"),
			"os": runtime.GOOS,
		},
	}

	if err := app.Run(os.Args); err != nil {
		fmt.Println(err)
	}
}
